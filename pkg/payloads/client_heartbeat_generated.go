// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"
import "time"

type ClientHeartbeatJson struct {
	// Timestamp of the heartbeat
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`

	// Type of payload - must be client.heartbeat
	Type ClientHeartbeatJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type ClientHeartbeatJsonType string

const ClientHeartbeatJsonTypeClientHeartbeat ClientHeartbeatJsonType = "client.heartbeat"

var enumValues_ClientHeartbeatJsonType = []interface{}{
	"client.heartbeat",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ClientHeartbeatJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ClientHeartbeatJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ClientHeartbeatJsonType, v)
	}
	*j = ClientHeartbeatJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ClientHeartbeatJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in ClientHeartbeatJson: required")
	}
	type Plain ClientHeartbeatJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ClientHeartbeatJson(plain)
	return nil
}
