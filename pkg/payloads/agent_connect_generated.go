// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type AgentConnectJson struct {
	// Optional configuration for the agent
	Config AgentConnectJsonConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Optional metadata for the agent as key-value string pairs
	Metadata AgentConnectJsonMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Optional ID for the session
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Type of payload - must be agent.register
	Type AgentConnectJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

// Optional configuration for the agent
type AgentConnectJsonConfig map[string]interface{}

// Optional metadata for the agent as key-value string pairs
type AgentConnectJsonMetadata map[string]string

type AgentConnectJsonType string

const AgentConnectJsonTypeAgentConnect AgentConnectJsonType = "agent.connect"

var enumValues_AgentConnectJsonType = []interface{}{
	"agent.connect",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentConnectJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AgentConnectJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AgentConnectJsonType, v)
	}
	*j = AgentConnectJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentConnectJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in AgentConnectJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in AgentConnectJson: required")
	}
	type Plain AgentConnectJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AgentConnectJson(plain)
	return nil
}
