// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type SessionCreateJson struct {
	// Optional ID for the session
	SessionId *string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Optional shell to use for the session
	Shell string `json:"shell,omitempty" yaml:"shell,omitempty" mapstructure:"shell,omitempty"`

	// Type of payload - must be session.create
	Type SessionCreateJsonType `json:"type" yaml:"type" mapstructure:"type"`

	// Optional username for the session
	Username string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`
}

type SessionCreateJsonType string

const SessionCreateJsonTypeSessionCreate SessionCreateJsonType = "session.create"

var enumValues_SessionCreateJsonType = []interface{}{
	"session.create",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionCreateJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SessionCreateJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SessionCreateJsonType, v)
	}
	*j = SessionCreateJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionCreateJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SessionCreateJson: required")
	}
	type Plain SessionCreateJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["shell"]; !ok || v == nil {
		plain.Shell = ""
	}
	if v, ok := raw["username"]; !ok || v == nil {
		plain.Username = ""
	}
	*j = SessionCreateJson(plain)
	return nil
}
