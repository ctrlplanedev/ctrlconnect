// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type SessionDeleteJson struct {
	// ID of the session to delete
	SessionId string `json:"sessionId" yaml:"sessionId" mapstructure:"sessionId"`

	// Type of payload - must be session.create
	Type SessionDeleteJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type SessionDeleteJsonType string

const SessionDeleteJsonTypeSessionDelete SessionDeleteJsonType = "session.delete"

var enumValues_SessionDeleteJsonType = []interface{}{
	"session.delete",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionDeleteJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SessionDeleteJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SessionDeleteJsonType, v)
	}
	*j = SessionDeleteJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionDeleteJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["sessionId"]; raw != nil && !ok {
		return fmt.Errorf("field sessionId in SessionDeleteJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SessionDeleteJson: required")
	}
	type Plain SessionDeleteJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SessionDeleteJson(plain)
	return nil
}
