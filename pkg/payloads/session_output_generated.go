// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type SessionOutputJson struct {
	// Output data from the PTY session
	Data string `json:"data" yaml:"data" mapstructure:"data"`

	// ID of the session that generated the output
	SessionId string `json:"sessionId" yaml:"sessionId" mapstructure:"sessionId"`

	// Type of payload - must be session.output
	Type SessionOutputJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type SessionOutputJsonType string

const SessionOutputJsonTypeSessionOutput SessionOutputJsonType = "session.output"

var enumValues_SessionOutputJsonType = []interface{}{
	"session.output",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionOutputJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SessionOutputJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SessionOutputJsonType, v)
	}
	*j = SessionOutputJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionOutputJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in SessionOutputJson: required")
	}
	if _, ok := raw["sessionId"]; raw != nil && !ok {
		return fmt.Errorf("field sessionId in SessionOutputJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SessionOutputJson: required")
	}
	type Plain SessionOutputJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SessionOutputJson(plain)
	return nil
}
