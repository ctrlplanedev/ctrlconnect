// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type SessionInputJson struct {
	// The input data to send to the PTY session's standard input (stdin)
	Data string `json:"data" yaml:"data" mapstructure:"data"`

	// Unique identifier of the PTY session that should receive this input data
	SessionId string `json:"sessionId" yaml:"sessionId" mapstructure:"sessionId"`

	// Type of payload - must be session.input to identify this as session input data
	Type SessionInputJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type SessionInputJsonType string

const SessionInputJsonTypeSessionInput SessionInputJsonType = "session.input"

var enumValues_SessionInputJsonType = []interface{}{
	"session.input",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionInputJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SessionInputJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SessionInputJsonType, v)
	}
	*j = SessionInputJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionInputJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in SessionInputJson: required")
	}
	if _, ok := raw["sessionId"]; raw != nil && !ok {
		return fmt.Errorf("field sessionId in SessionInputJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SessionInputJson: required")
	}
	type Plain SessionInputJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SessionInputJson(plain)
	return nil
}
